#!/usr/bin/env python3
import argparse
import base64
import json
import re
import subprocess

import yaml

from util import sha256sum, fetch

parser = argparse.ArgumentParser(description='Launch Tinfoil CVM')
parser.add_argument('--gpus', nargs='+', help='List of GPU PCIe addresses to pass through (e.g., "21:00.0")')
parser.add_argument('--port', type=int, default=8444, help='Port to listen on for HTTP requests')
parser.add_argument('--debug', action='store_true', help='Enable debug mode')
parser.add_argument('deployment_file', help='Path to deployment JSON file')
args = parser.parse_args()

deployment_file = args.deployment_file
deployment = json.load(open(deployment_file))

cache_dir = "cache"

cmdline = deployment["cmdline"]
if args.debug:
    print("WARNING: Debug mode enabled. Root login is enabled and measurements will not match")
    cmdline += " tinfoil-debug=on"

config_hash = re.search(r'tinfoil-config-hash=([0-9a-f]+)', cmdline).group(1)
config_doc = base64.b64decode(deployment["config"]).decode("utf-8")
config_file = f"{cache_dir}/config-{config_hash}.yml"
with open(config_file, "w") as dep_config_file:
    dep_config_file.write(config_doc)

if sha256sum(config_file) != config_hash:
    raise Exception("Build error: config hash mismatch")

config = yaml.safe_load(config_doc)
cvm_version = config["cvm-version"]
cpus = config["cpus"]
memory = config["memory"]
roothash = deployment["hashes"]["root"]

print(f"Preparing CVM v{cvm_version} with {cpus} CPUs and {memory}MB of memory")
print(f"Config hash: {config_hash}")

kernel_file = fetch(f"https://images.tinfoil.sh/cvm/tinfoil-inference-v{cvm_version}.vmlinuz", cache_dir)
initrd_file = fetch(f"https://images.tinfoil.sh/cvm/tinfoil-inference-v{cvm_version}.initrd", cache_dir)
disk_file = fetch(f"https://images.tinfoil.sh/cvm/tinfoil-inference-v{cvm_version}.raw", cache_dir)

if deployment["hashes"]["initrd"] != sha256sum(initrd_file):
    raise Exception("Invalid initrd hash")
else:
    print(f"Initrd hash valid: {deployment['hashes']['initrd']}")

if deployment["hashes"]["kernel"] != sha256sum(kernel_file):
    raise Exception("Invalid kernel hash")
else:
    print(f"Kernel hash valid: {deployment['hashes']['kernel']}")

model_disks = []
if "models" in config:
    for model in config["models"]:
        model_disks.append(f"/home/ubuntu/models/{model['id'].replace(':', '-')}.mpk")

qemu_args = [
    "sudo", "/home/ubuntu/qemu/build/qemu-system-x86_64",
    "-enable-kvm",
    "-cpu", "EPYC-v4",
    "-machine", "q35",
    "-smp", f"{cpus},maxcpus={cpus}",
    "-m", f"{memory}M",
    "-no-reboot",

    # Memory Encryption
    "-machine", "memory-encryption=sev0,vmport=off",
    "-object", f"memory-backend-memfd,id=ram1,size={memory}M,share=true,prealloc=false",
    "-machine", "memory-backend=ram1",
    "-object", "sev-snp-guest,id=sev0,policy=0x30000,cbitpos=51,reduced-phys-bits=5,kernel-hashes=on",

    "-bios", "/home/ubuntu/cvmimage/OVMF.fd",
    "-kernel", kernel_file,
    "-initrd", initrd_file,
    "-append", cmdline,

    # Network
    "-net", "nic,model=e1000", "-net", f"user,hostfwd=tcp::{args.port}-:443",

    # Console
    "-nographic"
]

# Disks
for i, file in enumerate([disk_file, config_file, *model_disks]):
    qemu_args.extend([
        "-drive", f"file={file},if=none,id=disk{i},format=raw,readonly=on",
        "-device", f"virtio-scsi-pci,id=scsi{i},disable-legacy=on,iommu_platform=true",
        "-device", f"scsi-hd,drive=disk{i}",
    ])

if args.gpus:
    qemu_args.extend(["-fw_cfg", f"name=opt/ovmf/X-PciMmio64Mb,string=262144"])

    for i, gpu in enumerate(args.gpus):
        subprocess.run([
            "sudo",
            "python3",
            "/shared/nvtrust/host_tools/python/gpu-admin-tools/nvidia_gpu_tools.py",
            "--gpu-bdf", gpu,
            "--set-cc-mode=on",
            "--reset-after-cc-mode-switch",
        ])

        qemu_args.extend([
            "-device", f"pcie-root-port,id=pci.{i + 1},bus=pcie.0,slot={i + 1}",
            "-device", f"vfio-pci,host={gpu},bus=pci.{i + 1}"
        ])

print("Starting QEMU")
print(qemu_args)
subprocess.run(qemu_args)
